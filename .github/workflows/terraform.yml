name: Gitops IAC

on:
  push:
    branches:
      - main
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/**

env:
  # credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for the terraform state
  BUCKET_TF: ${{ secrets.BUCKET_TF }}
  AWS_REGION: us-east-1

jobs:
  terraform:
    name: "Apply terraform code changes"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_TF: ${{ secrets.BUCKET_TF }}
          AWS_REGION: us-east-1
        run: terraform init -backend-config="bucket=$BUCKET_TF"

      - name: Terraform Format
        id: fmt
        run: terraform fmt --check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_TF: ${{ secrets.BUCKET_TF }}
          AWS_REGION: us-east-1
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_TF: ${{ secrets.BUCKET_TF }}
          AWS_REGION: us-east-1
        run: terraform apply --auto-approve --input=false --parallelism=1 planfile

      - name: Terraform Plan Destroy
        id: plan_destroy
        if: github.event.inputs.destroy == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_TF: ${{ secrets.BUCKET_TF }}
          AWS_REGION: us-east-1
        run: terraform plan -destroy -no-color -input=false -out destroy_planfile

      - name: Terraform Apply Destroy
        id: apply_destroy
        if: github.event.inputs.destroy == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_TF: ${{ secrets.BUCKET_TF }}
          AWS_REGION: us-east-1
        run: terraform apply --auto-approve --input=false --parallelism=1 destroy_planfile
